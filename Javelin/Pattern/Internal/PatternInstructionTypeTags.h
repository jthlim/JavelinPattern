// InstructionType, 		ParameterType,			Consumer

TAG(AdvanceByte,       		None,					true)		// Doesn't even check for pEnd
TAG(StepBack,				Value,					false)

TAG(AnyByte,        		None,					true)

TAG(AssertStartOfInput, 	None,					false)
TAG(AssertEndOfInput, 		None,					false)
TAG(AssertStartOfLine, 		None,					false)
TAG(AssertEndOfLine, 		None,					false)
TAG(AssertWordBoundary, 	WordBoundaryHint,		false)
TAG(AssertNotWordBoundary,	WordBoundaryHint,		false)
TAG(AssertStartOfSearch,	None,					false)
TAG(AssertRecurseValue,		Value,					false)

TAG(Byte,					SingleByte,				true)
TAG(ByteEitherOf2,			DoubleByte,				true)
TAG(ByteEitherOf3,			TripleByte,				true)
TAG(ByteRange,				ByteRange,				true)
TAG(ByteBitMask,			BitMask,				true)

// JumpTableInstruction::BuildByteCode requires ByteJumpMask and ByteJumpRange follow.
TAG(ByteJumpTable,			JumpTable,				true)		// Special Consumer
// ByteJumpMask must be ordered right after ByteJumpTable
TAG(ByteJumpMask,			JumpMask,				true)		// Special Consumer
// ByteJumpRange must be ordered right after ByteJumpMask
TAG(ByteJumpRange,			JumpRange,				true)		// Special Consumer

TAG(ByteNot,				SingleByte,				true)
TAG(ByteNotEitherOf2,		DoubleByte,				true)
TAG(ByteNotEitherOf3,		TripleByte,				true)
TAG(ByteNotRange,			ByteRange,				true)

TAG(FindByte,       		ByteValueAndInstruction,true)		// Special consumer

TAG(SearchByte,				SearchByte,				false)
TAG(SearchByteEitherOf2,	SearchByte2,			false)
TAG(SearchByteEitherOf3,	SearchByte3,			false)
TAG(SearchByteEitherOf4,	SearchByte4,			false)
TAG(SearchByteEitherOf5,	SearchByte5,			false)
TAG(SearchByteEitherOf6,	SearchByte6,			false)
TAG(SearchByteEitherOf7,	SearchByte7,			false)
TAG(SearchByteEitherOf8,	SearchByte8,			false)
TAG(SearchBytePair,			SearchByte2,			false)
TAG(SearchBytePair2,		SearchByte4,			false)
TAG(SearchBytePair3,		SearchByte6,			false)
TAG(SearchBytePair4,		SearchByte8,			false)
TAG(SearchByteTriplet,		SearchByte3,			false)
TAG(SearchByteTriplet2,		SearchByte6,			false)
TAG(SearchByteRange,		SearchByte2,			false)
TAG(SearchByteRangePair,	SearchByte4,			false)
TAG(SearchBoyerMoore,		SearchData,				false)
TAG(SearchShiftOr,			SearchData,				false)
TAG(PropagateBackwards,		BitMask,				false)		// The PropagateBackwards instruction has an interesting implementation
																// It is used to accelerate searching for patterns that begin with a
																// repeated byte mask. eg. \w+ing or [a-zA-Z]*ing
																// - it simply steps backwards while the bitmask is valid. No other checks!
																// This is because at the point that it's generated, if a match is not
																// made, then the string is scanned until a byte opposite from the byte
																// match is found, then the search continues.
																// Thompson nfa/dfa models that don't care about the starting point
																// can just ignore this instruction.
																// Care has been taken to ensure that this instruction is only
																// ever present after a search instruction

// JumpTableInstruction::BuildByteCode requires DispatchMask and DispatchRange follow.
TAG(DispatchTable,			JumpTable,				false)
// DispatchMask must be ordered right after DispatchJumpTable
TAG(DispatchMask,			JumpMask,				false)
// DispatchRange must be ordered right after DispatchMask
TAG(DispatchRange,			JumpRange,				false)

TAG(BackReference,			Value,					false)

TAG(Call,					Call,					false)
TAG(Possess,				Call,					false)
TAG(Recurse,				ValueAndInstruction,	false)

TAG(Jump,					Value,					false)
TAG(Match,					None,					false)
TAG(Save,					Save,					false)
TAG(SaveNoRecurse,			Save,					false)
TAG(Fail,					None,					true)		// Generated when a bitmask has no valid bits
TAG(Success,				None,					false)		// Used by lookahead/lookbehind asserts
TAG(ReturnIfRecurseValue,	Value,					false)
TAG(ProgressCheck,			Value,					false)

TAG(Split,					Split,					false)
TAG(SplitMatch,				SplitMatch,				false)		// Only ever two matches
TAG(SplitNextN,				Value,					false)		// Only in generated bytecode
TAG(SplitNNext,				Value,					false)		// Only in generated bytecode
TAG(SplitNextMatchN,		Value,					false)		// Only in generated bytecode
TAG(SplitNMatchNext,		Value,					false)		// Only in generated bytecode

