// Adapted from http://corsix.github.io/dynasm-doc/tutorial.html

#include "Javelin/Assembler/riscv/Assembler.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/time.h>

#define RUN_BUILD_BENCHMARK 0

#define TAPE_SIZE 32768
#define MAX_NESTING 100

unsigned char tape[TAPE_SIZE];

static uint64_t GetMicroTime()
{
  timeval tp;
  gettimeofday(&tp, nullptr);
  
  return tp.tv_sec * 1000000ULL + tp.tv_usec;
}

#define bad_program(s) exit(fprintf(stderr, "bad program near %.16s: %s\n", program, s))

» .define pTape s0
» .define putch s2
» .define getch s3

» .macro lbeqz reg, target
»   .if delta13 target
»     beqz reg, target
»   .else
»     bnez reg, 1f
»     j target
»   1:
»   .endif
» .endm
»
» .macro lbnez reg, target
»   .if delta13 target
»     bnez reg, target
»   .else
»     beqz reg, 1f
»     j target
»   1:
»   .endif
» .endm
»

static void bf_compile(const char* program, Javelin::Assembler &assembler)
{
  unsigned loops[MAX_NESTING];
  int n;
  int nloops = 0;
  int labelIndex = 0;

  for(;;) {
    switch(*program++) {
    case '<':
      for(n = 1; *program == '<'; ++n, ++program);
      » addi pTape, {-n}
      break;
    case '>':
      for(n = 1; *program == '>'; ++n, ++program);
      » addi pTape, {n}
      break;
    case '+':
      for(n = 1; *program == '+'; ++n, ++program);
      » lb a0, (pTape)
      » addi a0, {n}
      » sb a0, (pTape)
      break;
    case '-':
      for(n = 1; *program == '-'; ++n, ++program);
      » lb a0, (pTape)
      » addi a0, {-n}
      » sb a0, (pTape)
      break;
    case ',':
      » jalr getch
      » sb a0, (pTape)
      break;
    case '.':
      » lb a0, (pTape)
      » jalr putch
      break;
    case '[':
      if(nloops == MAX_NESTING)
        bad_program("Nesting too deep");
      if(program[0] == '-' && program[1] == ']') {
        // Special case zero detection,
        » sb zero, (pTape)
        program += 2;
      } else {
        » lb a0, (pTape)
        » lbeqz a0, {labelIndex+1}f
        »{labelIndex}:
        
        loops[nloops] = labelIndex;
        ++nloops;
        labelIndex += 2;
      }
      break;
    case ']':
      if(nloops == 0) {
        bad_program("] without matching [");
      } else {
        int labelIndex = loops[--nloops];
        » lb a0, (pTape)
        » lbnez a0, {labelIndex}b
        »{labelIndex+1}:
      }
      break;
    case 0:
      if(nloops != 0) {
        program = "<EOF>";
        bad_program("[ without matching ]");
      }
      return;
    }
  }
}

static void bf_run(const char* program)
{
#if RUN_BUILD_BENCHMARK
  for(int i = 0; i < 40000; ++i)
#endif
  {
    Javelin::Assembler assembler;
    
#if !RUN_BUILD_BENCHMARK
    uint64_t startParse = GetMicroTime();
#endif
    » addi sp, -32
    » sd pTape, (sp)
    » sd putch, 8(sp)
    » sd getch, 16(sp)
    » sd ra, 24(sp)
    » mv pTape, a0
    » mv putch, a1
    » mv getch, a2
    bf_compile(program, assembler);
    » ld pTape, (sp)
    » ld putch, 8(sp)
    » ld getch, 16(sp)
    » ld ra, 24(sp)
    » addi sp, 32
    » ret

#if !RUN_BUILD_BENCHMARK
    uint64_t endParse = GetMicroTime();
    printf("Parse time: %lluus\n", endParse - startParse);

    uint64_t startBuild = GetMicroTime();
#endif
    typedef void (*JitMethod)(unsigned char* tape, int (*putchar)(int), int (*getchar)());
    JitMethod function = (JitMethod) assembler.Build();
#if !RUN_BUILD_BENCHMARK
    uint64_t endBuild = GetMicroTime();
    printf("Build time: %lluus\n", endBuild - startBuild);
    printf("Code size: %u\n", assembler.codeSize);

    function(tape, putchar, getchar);
#endif
    
    Javelin::SimpleJitMemoryManager::StaticInstanceRelease((void*) function);
  }
}

int main(int argc, char** argv)
{
#if RUN_BUILD_BENCHMARK
  for(int i = 0; i < 10; ++i)
#endif
  {
    uint64_t start = GetMicroTime();
    if(argc == 2) {
      long sz;
      char* program;
      
      FILE* f = fopen(argv[1], "r");
      if(!f) {
        fprintf(stderr, "Cannot open %s\n", argv[1]);
        return 1;
      }
      fseek(f, 0, SEEK_END);
      sz = ftell(f);
      program = (char*)malloc(sz + 1);
      fseek(f, 0, SEEK_SET);
      program[fread(program, 1, sz, f)] = 0;
      fclose(f);
      bf_run(program);
      uint64_t end = GetMicroTime();
      printf("Execution time: %lluus\n", end-start);
    } else {
      fprintf(stderr, "Usage: %s INFILE.bf\n", argv[0]);
      return 1;
    }
  }
  return 0;
}

