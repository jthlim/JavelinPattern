// Adapted from http://corsix.github.io/dynasm-doc/tutorial.html

#include "Javelin/Assembler/arm64/Assembler.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/time.h>

#define TAPE_SIZE 32768
#define MAX_NESTING 100

unsigned char tape[TAPE_SIZE];

typedef struct bf_state
{
  unsigned char* tape;
  void (*put_ch)(unsigned char);
  unsigned char (*get_ch)();
} bf_state_t;

static uint64_t GetMicroTime()
{
  timeval tp;
  gettimeofday(&tp, nullptr);
  
  return tp.tv_sec * 1000000ULL + tp.tv_usec;
}

#define bad_program(s) exit(fprintf(stderr, "bad program near %.16s: %s\n", program, s))

static bool IsPowerOf2(unsigned int i)  { return (i & (i-1) ) == 0; }

static void bf_putchar(unsigned char c)
{
  putchar((int)c);
}

static unsigned char bf_getchar()
{
  return (unsigned char) getchar();
}

static bool bf_isBalancedLoopWithSingleDecrement(const char *program)
{
  int n;
  int activeOffset = 0;
  int offset0Adjust = 0;
  for(;;) {
    switch(*program++) {
      case '<':
        for(n = 1; *program == '<'; ++n, ++program);
        activeOffset -= n;
        break;
      case '>':
        for(n = 1; *program == '>'; ++n, ++program);
        activeOffset += n;
        break;
      case '+':
        for(n = 1; *program == '+'; ++n, ++program);
        if(activeOffset == 0) offset0Adjust += n;
        break;
      case '-':
        for(n = 1; *program == '-'; ++n, ++program);
        if(activeOffset == 0) offset0Adjust -= n;
        break;
      case ',':
        return false;
      case '.':
        return false;
      case '[':
        return false;
      case ']':
        return activeOffset == 0 && offset0Adjust == -1;
      case 0:
        program = "<EOF>";
        bad_program("[ without matching ]");
    }
  }
}


» .define pTape x19
» .define putch x20
» .define getch x21

static void UpdateOffset(Javelin::Assembler &assembler, int &activeOffset)
{
  if(activeOffset < 2048) {
    int delta = 2048 - activeOffset;
    » sub pTape, pTape, #{delta}
    activeOffset = 2048;
  } else if(activeOffset > 2048) {
    int delta = activeOffset - 2048;
    » add pTape, pTape, #{delta}
    activeOffset = 2048;
  }
}

static void UpdateOffsetBounds(Javelin::Assembler &assembler, int &activeOffset)
{
  if(activeOffset < 0) {
    int delta = 2048 - activeOffset;
    » sub pTape, pTape, #{delta}
    activeOffset = 2048;
  } else if(activeOffset >= 4096)  {
    int delta = activeOffset - 2048;
    » add pTape, pTape, #{delta}
    activeOffset = 2048;
  }
}

static void bf_emitBalancedLoopWithSingleDecrement(Javelin::Assembler &assembler, const char *&program, int baseActiveOffset)
{
  int n;
  int activeOffset = 0;
  int offset0Adjust = 0;
  » ldrb w1, [pTape, #{baseActiveOffset}]
  for(;;) {
    switch(*program++) {
      case '<':
        for(n = 1; *program == '<'; ++n, ++program);
        activeOffset -= n;
        break;
      case '>':
        for(n = 1; *program == '>'; ++n, ++program);
        activeOffset += n;
        break;
      case '+':
        for(n = 1; *program == '+'; ++n, ++program);
        if(activeOffset == 0) offset0Adjust += n;
        else if(IsPowerOf2(n)) {
          » ldrsb w0, [pTape, #{baseActiveOffset+activeOffset}]
          » add w0, w0, w1, lsl #{__builtin_ctz(n)}
          » strb w0, [pTape, #{baseActiveOffset+activeOffset}]
        } else {
          » ldrsb w0, [pTape, #{baseActiveOffset+activeOffset}]
          » movz w2, #{n}
          » madd w0, w1, w2, w0
          » strb w0, [pTape, #{baseActiveOffset+activeOffset}]
        }
        break;
      case '-':
        for(n = 1; *program == '-'; ++n, ++program);
        if(activeOffset == 0) offset0Adjust += n;
        else if(IsPowerOf2(n)) {
          » ldrsb w0, [pTape, #{baseActiveOffset+activeOffset}]
          » sub w0, w0, w1, lsl #{__builtin_ctz(n)}
          » strb w0, [pTape, #{baseActiveOffset+activeOffset}]
        } else {
          » ldrsb w0, [pTape, #{baseActiveOffset+activeOffset}]
          » movz w2, #{n}
          » msub w0, w1, w2, w0
          » strb w0, [pTape, #{baseActiveOffset+activeOffset}]
        }
        break;
      case ']':
        » strb wzr, [pTape, #{baseActiveOffset}]
        return;
    }
  }
}

static void bf_compile(const char* program, Javelin::Assembler &assembler)
{
  unsigned loops[MAX_NESTING];
  int n;
  int nloops = 0;
  int labelIndex = 0;
  int activeOffset = 2048;
  int lastStore = -1;
  const char *start = program;

  for(;;) {
    switch(*program++) {
    case '<':
      for(n = 1; *program == '<'; ++n, ++program);
      activeOffset -= n;
      break;
    case '>':
      for(n = 1; *program == '>'; ++n, ++program);
      activeOffset += n;
      break;
    case '+':
      for(n = 1; *program == '+'; ++n, ++program);
      UpdateOffsetBounds(assembler, activeOffset);
      » ldrsb w0, [pTape, #{activeOffset}]
      » add w0, w0, #{n}
      » strb w0, [pTape, #{activeOffset}]
      lastStore = activeOffset;
      break;
    case '-':
      for(n = 1; *program == '-'; ++n, ++program);
      UpdateOffsetBounds(assembler, activeOffset);
      » ldrsb w0, [pTape, #{activeOffset}]
      » sub w0, w0, #{n}
      » strb w0, [pTape, #{activeOffset}]
      lastStore = activeOffset;
      break;
    case ',':
      UpdateOffsetBounds(assembler, activeOffset);
      » blr getch
      » strb w0, [pTape, #{activeOffset}]
      lastStore = activeOffset;
      break;
    case '.':
      UpdateOffsetBounds(assembler, activeOffset);
      » ldrb w0, [pTape, #{activeOffset}]
      » blr putch
      lastStore = -1;
      break;
    case '[':
      if(nloops == MAX_NESTING)
        bad_program("Nesting too deep");
      if(program[0] == '-' && program[1] == ']') {
        // Special case zero detection,
        UpdateOffsetBounds(assembler, activeOffset);
        » strb wzr, [pTape, #{activeOffset}]
        program += 2;
      } else if(bf_isBalancedLoopWithSingleDecrement(program)) {
        bf_emitBalancedLoopWithSingleDecrement(assembler, program, activeOffset);
      } else {
        // If the previuos symbol was also a while (*ptr)
        // Then no updates to activeOffset or a comparison need to be made.
        if(program-2 < start || program[-2] != '[') {
          if(activeOffset != lastStore) {
            UpdateOffsetBounds(assembler, activeOffset);
            » ldrb w0, [pTape, #{activeOffset}]
          }
          UpdateOffset(assembler, activeOffset);
          » cbz w0, {labelIndex+1}f
          »{labelIndex}:
          loops[nloops] = labelIndex|1;
        } else {
          »{labelIndex}:
          loops[nloops] = labelIndex;
        }
        ++nloops;
        labelIndex += 2;
      }
      lastStore = -1;
      break;
    case ']':
      if(nloops == 0) {
        bad_program("] without matching [");
      } else {
        int labelIndex = loops[--nloops];
        if(activeOffset != lastStore) {
          UpdateOffsetBounds(assembler, activeOffset);
          » ldrb w0, [pTape, #{activeOffset}]
        }
        UpdateOffset(assembler, activeOffset);
        if(labelIndex & 1)
        {
          » cbnz w0, {labelIndex-1}b
          »{labelIndex}:
        }
        else
        {
          » cbnz w0, {labelIndex}b
        }
      }
      break;
    case 0:
      if(nloops != 0) {
        program = "<EOF>";
        bad_program("[ without matching ]");
      }
      return;
    }
  }
}

static void bf_run(const char* program)
{
  Javelin::Assembler assembler;
  
  » stp pTape, putch, [sp, #-16]!
  » stp getch, lr, [sp, #-16]!
  » ldp pTape, putch, [x0]
  » ldr getch, [x0, #16]
  bf_compile(program, assembler);
  » ldp getch, lr, [sp], #16
  » ldp pTape, putch, [sp], #16
  » ret

  void (*function)(bf_state_t*) = (void(*)(bf_state_t*))assembler.Build();

  bf_state_t state;
  state.tape = &tape[0] - 2048;
  state.get_ch = bf_getchar;
  state.put_ch = bf_putchar;
  function(&state);
  
  Javelin::SimpleJitMemoryManager::StaticInstanceRelease((void*) function);
}

int main(int argc, char** argv)
{
  uint64_t start = GetMicroTime();
  if(argc == 2) {
    long sz;
    char* program;
    
    char filename[256];
    strcpy(filename, argv[0]);
    char *name = strrchr(filename, '/');
    strcpy(name+1, argv[1]);
    
    FILE* f = fopen(filename, "r");
    if(!f) {
      fprintf(stderr, "Cannot open %s\n", argv[1]);
      return 1;
    }
    fseek(f, 0, SEEK_END);
    sz = ftell(f);
    program = (char*)malloc(sz + 1);
    fseek(f, 0, SEEK_SET);
    program[fread(program, 1, sz, f)] = 0;
    fclose(f);
    bf_run(program);
    uint64_t end = GetMicroTime();
    printf("Execution time: %lluus\n", end-start);
  } else {
    fprintf(stderr, "Usage: %s INFILE.bf\n", argv[0]);
    return 1;
  }
  return 0;
}

